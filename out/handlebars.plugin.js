// Generated by CoffeeScript 1.7.1
(function() {
  var fs, path, wrench,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('safefs');

  wrench = require('wrench');

  path = require('path');

  module.exports = function(BasePlugin) {
    var HandlebarsPlugin;
    return HandlebarsPlugin = (function(_super) {
      __extends(HandlebarsPlugin, _super);

      HandlebarsPlugin.prototype.name = 'handlebars';

      HandlebarsPlugin.prototype.handlebars = null;

      function HandlebarsPlugin() {
        var config, docpad, handlebars, helper, name, partial, _ref, _ref1;
        HandlebarsPlugin.__super__.constructor.apply(this, arguments);
        docpad = this.docpad;
        config = this.config;
        handlebars = this.handlebars = require('handlebars');
        this.precompileOpts = this.config.precompileOpts || {};
        if (this.config.helpers) {
          _ref = this.config.helpers;
          for (name in _ref) {
            if (!__hasProp.call(_ref, name)) continue;
            helper = _ref[name];
            handlebars.registerHelper(name, helper);
          }
        }
        if (this.config.partials) {
          _ref1 = this.config.partials;
          for (name in _ref1) {
            if (!__hasProp.call(_ref1, name)) continue;
            partial = _ref1[name];
            handlebars.registerPartial(name, partial);
          }
        }
      }

      HandlebarsPlugin.prototype.render = function(opts) {
        var content, handlebars, inExtension, outExtension, output, templateData;
        inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, content = opts.content;
        handlebars = this.handlebars;
        if (inExtension === 'hb' || inExtension === 'hbs' || inExtension === 'handlebars') {
          if (outExtension === 'js' || outExtension === 'inlinejs') {
            output = this.handlePrecompileOpts(opts);
          } else {
            output = handlebars.compile(opts.content)(templateData);
          }
          return opts.content = output;
        }
      };

      HandlebarsPlugin.prototype.handlePrecompileOpts = function(opts) {
        var argv, post, pre, templateName, _ref;
        argv = this.precompileOpts;
        if (argv.wrapper == null) {
          argv.wrapper = "default";
        }
        if (argv.amdPath == null) {
          argv.amdPath = "";
        }
        pre = post = "";
        templateName = opts.file.attributes.slug;
        if (argv.wrapper === "amd") {
          pre += 'define([\'' + argv.amdPath + 'handlebars\'], function(Handlebars) {\n';
        }
        if (argv.wrapper === "default") {
          pre += '(function() {\n';
        }
        if (((_ref = argv.wrapper) === "default" || _ref === "amd")) {
          pre += '  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};\n';
          pre += 'templates[\'' + templateName + '\'] = template(';
          post += ');\n';
        }
        if (argv.wrapper === "amd") {
          post += '});';
        }
        if (argv.wrapper === "default") {
          post += '})();';
        }
        return pre + this.handlebars.precompile(opts.content) + post;
      };

      HandlebarsPlugin.prototype.generateBefore = function(opts, next) {
        var docpad, handlebars, partialsDir;
        partialsDir = this.config.partialsDir;
        handlebars = this.handlebars;
        docpad = this.docpad;
        if (partialsDir) {
          return wrench.readdirRecursive(partialsDir, function(err, files) {
            var fileName, filePath, partial, _i, _len;
            if (err) {
              return docpad.error(err);
            }
            if (files) {
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  fileName = files[_i];
                  if (!(fileName.match(/(hb|hbs|handlebars)$/))) {
                    continue;
                  }
                  filePath = path.join(partialsDir, fileName);
                  fileName = fileName.replace(new RegExp(path.sep.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1"), "g"), '/');
                  partial = fs.readFileSync(filePath, 'utf8');
                  handlebars.registerPartial(fileName.split('.')[0], partial);
                }
            }
            return next();
          });
        }
      };

      return HandlebarsPlugin;

    })(BasePlugin);
  };

}).call(this);
